[["index.html", "Data Science for Psychologists A Refreshed Exploratory &amp; Graphical Data Analysis in R Welcome to PSY 703 Mason Notes", " Data Science for Psychologists A Refreshed Exploratory &amp; Graphical Data Analysis in R S. Mason Garrison 2021-10-18 Welcome to PSY 703 Welcome to class! This website is designed to accompany Mason Garrisons Data Science for Psychologists (DS4P). DS4P is a graduate-level quantitative methods course at Wake Forest University. This class assumes zero knowledge of programming, computer science, linear algebra, probability, or really anything fancy. I encourage anyone who is quant-curious to work their way through these course notes. The course notes include lectures, worked examples, readings, activities, and labs. You can find the current version of the course syllabus here, along with all of the other syllabi for my classes. All the embedded lecture videos can be found on a youtube playlist. Mason Notes This website is constantly changing. This new course is in active development, and approximately 100% done. I have made this process explicitly transparent because I want you to see how you can use R to produce some pretty neat things. Indeed, Ive included the source code for this website in the class github. I encourage you to contribute to the course code. If you catch typos, errors, please issue a pull request with the fixes. If you find cool / useful resources, please add them. By the end of the semester, I would love for everyone to have contributed to the course materials. It can be as simple as adding a course request to the wishlist. I believe that it is useful skill to be able to do. How to use these notes This document is broken down into multiple chapters. Use the table of contents on the left side of the screen to navigate, and use the hamburger icon (horizontal bars) at the top of the document to open or close the table of contents. At the top of the document, youll see additional icons which you can click to search the document, change the size, font or color scheme of the page. The document will be updated (unpredictably) throughout the semester. Every module corresponds to a weeks worth of material. Most modules are dedicated to improving a specific skill or at the very least dedicated to a specific theme. Within each module, there are embedded videos, slides, activities, labs, and tutorials. The skills developed in each module build upon skills youve developed in previous modules. Eventually, this class will have more modules available than weeks in a semester, so that you  the reader can choose your own adventure (err module) youd like to start with. Although these notes share some of the features of a textbook, they are neither comprehensive nor completely original. The main purpose is to give you all a set of common materials on which to draw during the course. In class, we will sometimes do things outside the notes. The idea here is that you will read the materials and try to learn from them, just as you will attend classes and try to learn from them. Status of course In terms of timing, I will have each module completed by the start of the week. Given that the class meets either on Monday or Friday, the start of the week will be Wednesday at 12 p.m. EST. It is possible that I will get ahead of this deadline. You can see the current status of the course below. Although you are welcome to work ahead, be aware that I will be making changes to modules that havent officially started yet. In addition, I may add optional materials to previous modules that might be helpful. This table provides the current status of the course. It lists proportions of specific components by module. Overall it is 100% complete. Course Wishlist Although there will be hiccups and snafus along the way, one major advantage of this process is that you(!) can have a major input on what we cover. Some of these inputs have already been incorporated (such as github, Rshiny). So take advantage! Add your requests to the markdown list below! As I incorporate those requests, Ill move them into the Wish Granted Section. Wishes Github Rshiny Learning R functions fun, unusual ways of presenting data grammar of R Wish Not Yet Granted Data Science and the Law Computational neuroscience Multilevel Choosing the best analysis SEM, longitudinal data what to do with existing data basic data and programming skills (applied across platforms) troubleshooting (e.g., figuring out how to answer questions) Major Mission!!! Being comfortable with R really understand data draw meaningful conclusions about it understand why certain code is written certain way and applying that logic "],["attribution.html", "Attribution Major Attributions Additional Attributions", " Attribution This class leans heavily on other peoples materials and ideas. I have done my best to document the origin of the materials and ideas. In particular, I have noted those people whose work has been a major contribution as well as those who have additional contributions. You can see specific changes by examining the edit history on the git repo Major Attributions Jenny Bryans (jennybryan.org) STAT 545 and Happy Git with R; Joe Rodgerss PSY 8751 Exploratory and Graphical Data Analysis Course Mine Ã‡etinkaya-Rundels Data Science in a Box. Additional Attributions Academic.ios AWESOME DATA SCIENCE Julia Fukuyamas EXPLORATORY DATA ANALYSIS Benjamin Soltoffs Computing for the Social Sciences Grant McDermotts course materials on environmental economics and data science Thomas E. Love Karl Broman EMILY SUZANNE CLARKs Rubric for Unessays "],["license.html", "License", " License This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. This information is a human-readable summary of (and not a substitute for) the license. Please see https://creativecommons.org/licenses/by-sa/4.0/legalcode for the full legal text. You are free to: Sharecopy and redistribute the material in any medium or format Remixremix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: AttributionYou must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. ShareAlikeIf you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictionsYou may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. Notices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. "],["sitemap.html", "Sitemap", " Sitemap html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #gyueklfyle .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #gyueklfyle .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gyueklfyle .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #gyueklfyle .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; border-top-color: #FFFFFF; border-top-width: 0; } #gyueklfyle .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gyueklfyle .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gyueklfyle .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #gyueklfyle .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #gyueklfyle .gt_column_spanner_outer:first-child { padding-left: 0; } #gyueklfyle .gt_column_spanner_outer:last-child { padding-right: 0; } #gyueklfyle .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #gyueklfyle .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #gyueklfyle .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #gyueklfyle .gt_from_md > :first-child { margin-top: 0; } #gyueklfyle .gt_from_md > :last-child { margin-bottom: 0; } #gyueklfyle .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #gyueklfyle .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #gyueklfyle .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gyueklfyle .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #gyueklfyle .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gyueklfyle .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #gyueklfyle .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #gyueklfyle .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gyueklfyle .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gyueklfyle .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #gyueklfyle .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gyueklfyle .gt_sourcenote { font-size: 90%; padding: 4px; } #gyueklfyle .gt_left { text-align: left; } #gyueklfyle .gt_center { text-align: center; } #gyueklfyle .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #gyueklfyle .gt_font_normal { font-weight: normal; } #gyueklfyle .gt_font_bold { font-weight: bold; } #gyueklfyle .gt_font_italic { font-style: italic; } #gyueklfyle .gt_super { font-size: 65%; } #gyueklfyle .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } title link 404 website api wrappers website attribution website automation website basic data care website basic data care website bechdal website bootstrapping website choice your own activity website classic things in r website colophon website communicating data science results effectively website cross validation website data as rhetoric website data science and ethics website data types and recoding website data usually finds me website deeper diving into ggplot2 website designing effective visualizations website diy web data website dont miss module 00 website dont miss the last module website dplyr intro website exploratory data analysis website fitting and interpreting models website functions 1 website functions part1 website functions practicum website good resources website grammar of data wrangling website handson website import export website important topic a website importing data website index website lab01 website lab02 website lab03 website lab04 website lab05 website lab06a website lab06b website lab07 website lab08 website lab08b website lab09 website lab10 website lab11 website language of models website license website machines learn website media without a home yet website meet our toolbox website merges website mod06 website modeling non linear relationships website modeling with multiple predictors website natural language processing website neural networks website notes on feature engineering website notes on hypothesis testing website notes on logistic regression website odd design choices in data visualization website odd legacy data types website odd notes on cross validation website odd transformations data website overfitting website plots behaving badly website practical advice from the data professor website public health dashboards website quantifying uncertainty website r basics website r basics website reading error codes website references website rshiny overview website rshiny website scientific studies and confounding website scraping the web website secrets website shiny overview website shiny resources website shorthappygit website sitemap website special topics machine learn website star wars activity website syllabus website thoughtful workflow website thoughts from hadley wickham on tidyverse website tidy data website visualization examples website visualizing categorical data website visualizing data with ggplot2 website visualizing numerical data website welcome to base r website welcome to cross validation website welcome to data and ethics website welcome to data and visualization website welcome to data diving with types website welcome to data science website welcome to functions and automation website welcome to modeling the tidy way website welcome to overfitting and cross validation website welcome to prediction and overfitting website welcome to quantifying uncertainty website welcome to the template module website welcome to the tidyverse website welcome to tips for effective data visualization website welcome to web scraping website what is data science website working with multiple data frames website "],["colophon.html", "Colophon", " Colophon These notes was written in bookdown inside RStudio. The website is hosted with github, The complete source is available from github. The book style was designed by DesirÃ©e De Leon. This version of the notes was built with: #&gt; Finding R package dependencies ... Done! #&gt; setting value #&gt; version R version 4.0.5 (2021-03-31) #&gt; os Windows 10 x64 #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; ctype English_United States.1252 #&gt; tz America/New_York #&gt; date 2021-10-18 Along with these packages: "],["public-health-dashboards.html", "Public Health Dashboards Crowns and Tears: A Covid-19 visualization with a Music Box and punch cards Wake Forest Forsyth County North Carolina", " Public Health Dashboards Ok, so I know that this class is about data science, R, and data visualization However, I figured that it might be helpful for us all to have some public health dashboards in one easy place. If you want, we can pretend that this section is course content related because it shows data and whatnot. Or that it can give you ideas for portfolio pieces Crowns and Tears: A Covid-19 visualization with a Music Box and punch cards Source Code: https://github.com/simonhuwiler/crowns-and-tears Wake Forest The embedded dashboards are maintained by Wake Forest University and are made using Microsoft Power BI. More info about the dashboard can be found here here Forsyth County The embedded maps are maintained by Forsyth Countys department of public health. More info here Vaccinations Case Counts North Carolina "],["dont-miss-module-00.html", "Dont Miss Module 00 0.1 Big Ideas 0.2 Course Modality 0.3 Knowledge is Power 0.4 Meet Mason 0.5 Website Tour", " Dont Miss Module 00 This overview is designed to orient you to the class. Please watch the videos from this playlist and work your way through the notes. Although the module-level playlists are embedded in the course, you can find the full-course video playlist here. In addition, you can find the slides for this module here. Currently, there are 7 videos in this playlist. The average video length is 12 minutes, 27 seconds. The total length of the playlist is 1 hour, 27 minutes, 10 seconds. Data Science for Psychologists (DS4P) introduces on the principles of data science, including: data wrangling, modeling, visualization, and communication. In this class, we link those principles to psychological methods and open science practices by emphasizing exploratory analyses and description, rather than confirmatory analyses and prediction. Through the semester we will work our way thru Wickham and Grolemunds R for Data Science text and develop proficiency with tidyverse. This class emphasizes replication and reproducibility. DS4P is a practical skilled-based class and should be useful to students aiming for academia as well as those interested in industry. Applications of these methods can be applied to a full range of psychological areas, including perception (e.g, eye-tracking data), neuroscience (e.g., visualizing neural networks), and individual differences (e.g., valence analysis). 0.1 Big Ideas This class covers the following broad five areas: Reproducibility; Replication; Robust Methods; Resplendent Visualizations; and R Programming. 0.2 Course Modality Technically, this class is a blended class. The online portions are asynchronous, and often contain pre-recorded videos. The face-to-face portions of the class are  well  face-to-face. Or that was the idea anyway however, during the first semester I taught this course, a few members of the class were on the other side of the planet. Accordingly, I pivoted all the planned in-class activities and labs so that the entire class could complete their degrees on-time. So obviously this last-minute pivot is a little messy, but I think it turned out ok. So again, technically, this class was blended, but effectively it can be completed from anywhere at any time. It had to be. 0.2.1 Successful Asynchronous Learning Ive created a video highlighting how to be a successful asynchronous learner. Much of this information comes from Northeastern Universitys Tips for Taking Online Classes 0.2.1.1 Productivity During Lockdown 0.3 Knowledge is Power This brief video is covers the icebreaker I do in all of my classes. I encourage you to watch it. In it, I discuss stereotype threats and statistics anxiety. 0.4 Meet Mason 0.5 Website Tour "],["syllabus.html", "Syllabus 0.6 Materials 0.7 Assignment Instructions", " Syllabus You can find the full syllabus on my syllabus git repo. 0.6 Materials 0.6.1 Hardware This class requires that you have a laptop that can run R. 0.6.2 Required Texts The text is intended to supplement the videos, lecture notes, tutorials, activities, and labs. You probably need to consume all of them in order to be successful in this class. R for Data Science text 0.6.3 Software 0.6.3.1 R and RStudio R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows, and MacOS. RStudio is a free integrated development environment (IDE), a powerful user interface for R. 0.6.3.2 Git and Github Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files  called a repository  in a structured way. Think of it like the Track Changes features from Microsoft Word. Github is a free IDE and hosting service for Git. As a Wake Forest student, you should be able to access the GitHub Student Developer Pack for free. It includes a free PRO upgrade for your github account. 0.7 Assignment Instructions 0.7.1 Portfolio EDA is like basketball. We can watch either being done, and appreciate the art and skill involved in high-level performance. In the hands of Lebron James or Michael Jordan, a basketball is a highly-tuned artistic instrument; in the hands of John Tukey, a graph sings the praises of data in melodies both harmonious and discordant, reflecting model, data, and mood. Part of this course will be devoted to Watching and Studying the master at his work. But basketball is played by thousands of bodies with less than NBA training and ability. Some novice basketball players are just learning their craft, and others will evolve into future LJs and MJs; others have lower aspirations, yet still enjoy participating. So also should EDA be played. A second part of this course will involve learning to do EDA by Doing It. Each of you will be expected to do several EDA projects. These projects will be done during EDA Labs in class, as well as during out-of-class effort. The nature of most of the particular projects will be entirely up to you. You will report to your instructor during EDA Labs on what you have been doing and what you plan to do. You will give a 15-minute individual presentation to the class at the end of the course on what you did in one or two of your major projects. Each project will require some data, to which EDA techniques will be applied. You are welcomed (in fact, strongly encouraged) to use data with which you are currently involved; dissertation or thesis data, a research project, the almanac, data from an article, data from EDA or VDat, data you collect from your family or friends, or data provided to you by your instructor are possible sources. 0.7.2 Additional Ground Rules In this class, I actively encourage you to double dip that is incorporate your research into portfolio pieces and use these pieces in other places. However, I Mason have some ground rules. These rules have been implemented for a variety of reasons, but primarily they are to preserve my sanity by establishing some boundaries. As much as I adore this class, my students (especially you, dear reader!), and everything it stands for  it blurs a lot of lines because often I serve numerous roles while teaching this class. In particular, I may also be your mentor, your committee member, your collaborator, your letter of recommendation writer, your colleague, your confidant, your statistics consultant, your friend, or cat care-taker. I do my best to navigate these roles as best I can. However, for my own sanity, here are my basic rules. For anything that is related to a graduate school milestone (thesis, first year project, major area paper) or something else that youre working with your advisor on you need to actively discuss it with your adviser and get their approval in advance. They may not  and thats okay. If theyre unsure, Im very happy to schedule a quick 30 minute chat with all three of us. My role on anything milestone related is to assist you with the implementation or give you general feedback. I cannot give you advice related to modeling or anything that would merit a discussion about authorship on the final work. I may disagree with something they recommend that you do such as use a specific software that isnt R. (I do have many strong opinions about SPSS and AMOS, as well as modeling choices. However, there is nearly always room for debate in these issues. I try to remind folks that my opinion is just that  an opinion.) For all things related to your research at Wake Forest, please defer to your advisor. Everyone in the department are amazing at what they do. Seriously, each is an expert in their research area  just as I am an expert in R (and genetically-informed designs and strange data). In all likelihood, they know more about the modeling in their specific area. I am very happy to share my expert opinions and I have the privilege to facilitate such conversations through the nature of this class. HOWEVER, please defer to your advisor for all design decisions. I will do my best to tell you when something is outside the scope of the class or if were approaching a gray area. I will not always be successful at navigating this issue. However, I will do my best to do so because I think it is worth the extra challenge. 0.7.2.1 Possible Projects Examples of appropriate portfolio pieces are listed below. I hope some or all of these will be worked on by members of the class. You should develop and work on your projects individually, but discussion with the instructor and others class members is encouraged and in fact expected. Draw plots by hand of some data that are of interest to you, and transform the variables in several different ways. Interpret your results. Choose some data from EDA or VDat; table or plot them in a way that Tukey/Cleveland didnt. Find some population data of interest to you (e.g., North Carolina, Forsyth County,your cat herd, etc.) and do several hand plots like those in Chapter 5 of EDA. Interpret results. Find some data in the World Almanac and plot and/or table them. Use some two-way data, and repeatedly extract the medians like Tukey does in Ch. 10 &amp; 11. Find some time series data, and smooth them in several different ways (see EDA, ch. 7). Data with seasonal patterns are especially interesting (see VDat, pp. 152-172). Write an R, SAS-Graph, SPSS, BASIC, FORTRAN, C, JAVA, or other program to portray influence-enhanced scatterplots. Produce scatterplots of several relationships. Write a BASIC, FORTRAN, C, SAS, SPSS, JAVA, or other program to portray scatter plots on a computer. Give the user the option to plot X and/or Y as either raw data, logs, squares, cubes, reciprocals, roots, etc. Write an R, SAS-Graph, SPSS, BASIC, FORTRAN, C, JAVA or other program to produce some exotic version of stem-and-leaf diagrams. Write a an R, SAS-Graph, SPSS, BASIC, FORTRAN, C, JAVA or other program to plot in three-dimensions with time as one of the dimensions (i.e., a kinostatistical plot). Use R or SAS-Graph or some other dedicated graphical package to plot some interesting data (preferably in color, possibly in 3D, maybe even in higher than 3D). Write an R/SAS routine to do median smoothing by three, and use it on some data. Write an R program, or SAS MACRO or SAS PROC or SAS program to produce some EDA output (but dont duplicate what PROC UNIVARIATE already does). Find an R program in the R library that does interesting EDA; apply it to some interesting data. Produce a correlation matrix between many variables, and develop a scatterplot matrix from it. Read the literature on graphical data analysis and develop some new graphical techniques. Program your techniques. Apply them to real data. Invent a new EDA graphical application, and apply it to real data. Additional ideas that arent thoroughly thought out: Data Cleaning Project using Lab Data Web scraping project Tidy Tuesday Project Data Innovation Recreate a classic visualization Interactive Project (Rshiny) Infographic masters thesis / first year project Misleading Graph Impossible to Read Colorblind Friendly Visualization that only uses X colors Animated/video Tutorial Webscraper data Digital Humanities Project reproduce findings from an article in your content area machine learn! live dashboard maps/ geospatial lie to me graphic 0.7.2.2 Documenting Your Project You should keep a log describing all EDA projects you undertake. At the end of the course, two things will happen. First, you will give a 12- to 15-minute asynchronous presentation in which you choose one of your EDA projects to describe to the class. Your description should include the goal of the project, the data you used, and a demonstration (PowerPoint, handout, holdup, computer demo, etc.) of the product. 2nd, you will turn in a Portfolio, which consists of two components: A report describing all your projects. The total number depends on the scope and difficulty of each project (as specified in your contract). There may be projects that you dont finish. Thats fine; EDA projects are hardly ever completely finished; write them up anyway. The projects should be numbered consecutively (i.e., in the order in which you began them), and should include for each project a description of the goal, the product (computer program, hand graph, computer graph, etc.), the data, and some interpretation. Reports must be Word Processed and of high quality in terms of writing, grammar, presentation, etc. A prototypical example of the product of each project (e.g., a graph, computer code, etc.). You may wish to put computer output into binders or appendices, graphs into report folders, etc. Portfolios will not be returned; if you wish to have a copy, make one before you turn it in. Portfolios are due the last week of class. Project reports will not be accepted late. Please, no exceptions!!! 0.7.2.3 What is an unessay? An unessay is exactly what the name sounds like. It is not an essay (although it can be one if youd like). What it is is a means to highlight what you have learned. In this class, effectively what that means is that you get to select either a specific portfolio piece or perhaps several of them to highlight what you have learned in this class. 0.7.2.3.1 What makes a good unessay? A good unessay constitutes a critical and active engagement with the course material that shows insight and creativity and demonstrates time and effort devoted to creating something thoughtful. The chosen medium works persuasively with the design and polish of the unessay. The projects structural and formal elements productively serve the core concept of the unessay. The unessay includes a clear and insightful connection between your three choices and reflects a convincing and nuanced thesis. An A unessay come with a clearly stated explanation. This will include your thesis and an explanation of how your unessay responds to the prompt. 0.7.2.4 More Information about contract grading https://marckissel.netlify.app/post/on-the-unessay/ https://esclark.hcommons.org/the-unessay/ https://ryancordell.org/teaching/how-not-to-teach-digital-humanities/ "],["welcome-to-data-science.html", "1 Welcome to Data Science 1.1 Module Materials", " 1 Welcome to Data Science This module is designed to introduce you to data science. Please watch the videos and work your way through the notes. The videos start on the next page. You can find the module playlist here. Most of the slides used to make the videos in this module can be found in the slides repo. 1.1 Module Materials Videos Located in the subchapters of this module Slidedecks Welcome Slides Meet the toolkit Suggested Readings All subchapters of this module, including R basics and workflow R4DS Book Introduction Data exploration Introduction Happy Git with R If Happy Git is too much, start here If Short Happy Git is too much, start with Oh My Git Activities UN Voting Covid Data Bechdal Test Oh My Git Lab Hello R 1.1.1 Estimated Video Length No of videos : 8 Average length of video: 12 minutes, 6 seconds Total length of playlist: 1 hour, 36 minutes, 48 seconds "],["what-is-data-science.html", "2 What is Data Science? 2.1 See for yourselves! 2.2 Course structure and some other useful things", " 2 What is Data Science? You can follow along with the slides here if they do not appear below. 2.1 See for yourselves! Ive embedded a few examples below. 2.1.1 Shiny App 2.1.2 Hans Rosling The video below is the shorter version. Hans Roslings 200 Countries, 200 Years, 4 Minutes - The Joy of Stats You can find a longer talk-length version below. 2.1.3 Social Media Social media contains a ton of great (and terrible examples of data science in action. These examples range from entire subreddits, such as /r/DataisBeautiful (be sure to check out the highest voted posts) to celebrity tweets about data scientists. YASSSSSSSSSS MY LOVE STEVE IS BACK!!! #KornackiThirstcontinues pic.twitter.com/ynK4D87Bhr&mdash; Leslie Jones  (@Lesdoggg) January 5, 2021 Good reasons to not be a Data Scientist:- It is a lot of work- Literally nobody will know what you&#39;re talking about- In the end, your computer will be your only real friend&mdash;  Kareem Carr  (@kareem_carr) January 22, 2021 2.1.4 Read for yourselves! Link Preview What is Data Science @ Oreilly Data scientists combine entrepreneurship with patience, the willingness to build data products incrementally, the ability to explore, and the ability to iterate over a solution. They are inherently interdiscplinary. They can tackle all aspects of a problem, from initial data collection and data conditioning to drawing conclusions. They can think outside the box to come up with new ways to view the problem, or to work with very broadly defined problems: heres a lot of data, what can you make from it? What is Data Science @ Quora Data Science is a combination of a number of aspects of Data such as Technology, Algorithm development, and data interference to study the data, analyze it, and find innovative solutions to difficult problems. Basically Data Science is all about Analyzing data and driving for business growth by finding creative ways. The sexiest job of 21st century Data scientists today are akin to Wall Street quants of the 1980s and 1990s. In those days people with backgrounds in physics and math streamed to investment banks and hedge funds, where they could devise entirely new algorithms and data strategies. Then a variety of universities developed masters programs in financial engineering, which churned out a second generation of talent that was more accessible to mainstream firms. The pattern was repeated later in the 1990s with search engineers, whose rarefied skills soon came to be taught in computer science programs. Wikipedia Data science is an inter-disciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from many structural and unstructured data. Data science is related to data mining, machine learning and big data. How to Become a Data Scientist Data scientists are big data wranglers, gathering and analyzing large sets of structured and unstructured data. A data scientists role combines computer science, statistics, and mathematics. They analyze, process, and model data then interpret the results to create actionable plans for companies and other organizations. a very short history of #datascience The story of how data scientists became sexy is mostly the story of the coupling of the mature discipline of statistics with a very young onecomputer science. The term Data Science has emerged only recently to specifically designate a new profession that is expected to make sense of the vast stores of big data. But making sense of data has a long history and has been discussed by scientists, statisticians, librarians, computer scientists and others for years. The following timeline traces the evolution of the term Data Science and its use, attempts to define it, and related terms. 2.2 Course structure and some other useful things You can follow along with the slides here if they do not appear below. "],["choice-your-own-activity.html", "3 Choice your own activity 3.1 UN Votes 3.2 Covid Data", " 3 Choice your own activity You can do either activity. The choice is yours. 3.1 UN Votes You can find the materials for the UN activity here. The compiled version should look something like the following 3.2 Covid Data You can find the materials for the Covid version of this activity here. The compiled version should look something like the following "],["meet-our-toolbox.html", "4 Meet our toolbox! 4.1 R and RStudio", " 4 Meet our toolbox! You can follow along with the slides here if they do not appear below. I recommend installing R, Rstudio, git, and github before starting activity 02 4.1 R and RStudio 4.1.1 Install R and RStudio library(vembedr) embed_url(&quot;https://www.youtube.com/watch?v=kVIZGCT5p9U&quot;) %&gt;% use_align(&quot;center&quot;) Install R, a free software environment for statistical computing and graphics from CRAN, the Comprehensive R Archive Network. I highly recommend you install a precompiled binary distribution for your operating system  use the links up at the top of the CRAN page linked above! Install RStudios IDE (stands for integrated development environment), a powerful user interface for R. Get the Open Source Edition of RStudio Desktop. You can run either the Preview version or the official releases available here. RStudio comes with a text editor, so there is no immediate need to install a separate stand-alone editor. RStudio can interface with Git(Hub). However, you must do all the Git(Hub) set up described elsewhere before you can take advantage of this. If you have a pre-existing installation of R and/or RStudio, I highly recommend that you reinstall both and get as current as possible. It can be considerably harder to run old software than new. If you upgrade R, you will need to update any packages you have installed. The command below should get you started, though you may need to specify more arguments if, e.g., you have been using a non-default library for your packages. update.packages(ask = FALSE, checkBuilt = TRUE) Note: this code will only look for updates on CRAN. So if you use a package that lives only on GitHub or if you want a development version from GitHub, you will need to update manually, e.g. via devtools::install_github(). 4.1.2 Testing testing Do whatever is appropriate for your OS to launch RStudio. You should get a window similar to the screenshot you see here, but yours will be more boring because you havent written any code or made any figures yet! Put your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object with code like x &lt;- 3 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 12 print to screen. If yes, youve succeeded in installing R and RStudio. 4.1.3 Add-on packages R is an extensible system and many people share useful code they have developed as a package via CRAN and GitHub. To install a package from CRAN, for example the dplyr package for data manipulation, here is one way to do it in the R console (there are others). install.packages(&quot;dplyr&quot;, dependencies = TRUE) By including dependencies = TRUE, we are being explicit and extra-careful to install any additional packages the target package, dplyr in the example above, needs to have around. You could use the above method to install the following packages, all of which we will use: tidyr, package webpage ggplot2, package webpage 4.1.4 Further resources The above will get your basic setup ready but here are some links if you are interested in reading a bit further. How to Use RStudio RStudios leads for learning R R FAQ R Installation and Administration More about add-on packages in the R Installation and Administration Manual "],["bechdal.html", "5 Bechdel Activity", " 5 Bechdel Activity You can find the materials for the Bechdel activity here. The compiled version should look something like the following "],["thoughtful-workflow.html", "6 Thoughtful Workflow 6.1 R Markdown 6.2 Git and Github 6.3 Getting Help with R", " 6 Thoughtful Workflow At this point, I recommend you pause and think about your workflow. I give you permission to spend some time and energy sorting this out! It can be as or more important than learning a new R function or package. The experts dont talk about this much, because theyve already got a workflow; its something they do almost without thinking. Working through subsequent material in R Markdown documents, possibly using Git and GitHub to track and share your progress, is a great idea and will leave you more prepared for your future data analysis projects. Typing individual lines of R code is but a small part of data analysis and it pays off to think holistically about your workflow. If you want a lot more detail on workflows, you can wander over to the optional bit on r basics and workflow. 6.1 R Markdown If you are in the mood to be entertained, start the video from the beginning. But if youd rather just get on with it, start watching at 6:52. You can follow along with the slides here if they do not appear below. R Markdown is a very accessible way to create computational documents that combine prose and tables and figures produced by R code. An introductory R Markdown workflow, including how it intersects with Git, GitHub, and RStudio, is now maintained within the Happy Git site: Test drive R Markdown 6.2 Git and Github XKCD on Git First, its important to realize that Git and GitHub are distinct things. GitHub is an online hosting platform that provides an array of services built on top of the Git system. (Similar platforms include Bitbucket and GitLab.) Just like we dont need Rstudio to run R code, we dont need GitHub to use Git But, it will make our lives so much easier. I recommend checking out Jenny Bryans instructions around installation, setup, and early Git usage with her book Happy Git with R. I have provided a optional deep dive in a later chapter](#happygit). You can follow along with the slides here if they do not appear below. 6.2.1 What is Github? 6.2.2 Git Git is a distributed version control system. (Wait, what?) Okay, try this: Imagine if Dropbox and the Track changes feature in MS Word had a baby. Git would be that baby. In fact, its even better than that because Git is optimized for the things that social scientists and data scientists spend a lot of time working on (e.g. code). The learning curve is worth it  I promise you. Git and GitHubs role in global software development is not in question. - Theres a high probability that your favorite app, program or package is built using Git-based tools. (RStudio is a case in point.) Scientists and academic researchers are cottoning on too. Benefits of version control and collaboration tools aside, Git(Hub) helps to operationalize the ideals of open science and reproducibility. Journals have increasingly strict requirements regarding reproducibility and data access. GH makes this easy (DOI integration, off-the-shelf licenses, etc.). I run my entire lab on GH; this entire course is running on github; these lecture notes are hosted on github 6.3 Getting Help with R You can follow along with the slides here if they do not appear below. "],["r_basics.html", "7 Optional Deep Dive: R basics and workflows 7.1 Basics of working with R at the command line and RStudio goodies 7.2 Workspace and working directory 7.3 RStudio projects 7.4 Stuff", " 7 Optional Deep Dive: R basics and workflows Who is R? Why is R troubling PhD students?@AcademicChatter #AcademicTwitter&mdash; Dr. Marie Curie (@CurieDr) January 31, 2021 This chapter is a recommended, but optional deep dive (ODD) that might be useful to you. 7.1 Basics of working with R at the command line and RStudio goodies Launch RStudio/R. Notice the default panes: Console (entire left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help (tabbed in lower right) FYI: you can change the default location of the panes, among many other things: Customizing RStudio. Go into the Console, where we interact with the live R process. Make an assignment and then inspect the object you just created: x &lt;- 3 * 4 x #&gt; [1] 12 All R statements where you create objects  assignments  have this form: objectName &lt;- value and in my head I hear, e.g., x gets 12. You will make lots of assignments and the operator &lt;- is a pain to type. Dont be lazy and use =, although it would work, because it will just sow confusion later. Instead, utilize RStudios keyboard shortcut: Alt + - (the minus sign). Notice that RStudio auto-magically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces. RStudio offers many handy keyboard shortcuts. Also, Alt+Shift+K brings up a keyboard shortcut reference card. Object names cannot start with a digit and cannot contain certain other characters such as a comma or a space. You will be wise to adopt a convention for demarcating words in names. i_use_snake_case other.people.use.periods evenOthersUseCamelCase Make another assignment: this_is_a_really_long_name &lt;- 2.5 To inspect this, try out RStudios completion facility: type the first few characters, press TAB, add characters until you disambiguate, then press return. Make another assignment: mason_rocks &lt;- 2 ^ 3 Lets try to inspect: masonrocks #&gt; Error in eval(expr, envir, enclos): object &#39;masonrocks&#39; not found masn_rocks #&gt; Error in eval(expr, envir, enclos): object &#39;masn_rocks&#39; not found Implicit contract with the computer / scripting language: Computer will do tedious computation for you. In return, you will be completely precise in your instructions. Typos matter. Case matters. Get better at typing. R has a mind-blowing collection of built-in functions that are accessed like so: functionName(arg1 = val1, arg2 = val2, and so on) Lets try using seq() which makes regular sequences of numbers and, while were at it, demo more helpful features of RStudio. Type se and hit TAB. A pop up shows you possible completions. Specify seq() by typing more to disambiguate or using the up/down arrows to select. Notice the floating tool-tip-type help that pops up, reminding you of a functions arguments. If you want even more help, press F1 as directed to get the full documentation in the help tab of the lower right pane. Now open the parentheses and notice the automatic addition of the closing parenthesis and the placement of cursor in the middle. Type the arguments 1, 10 and hit return. RStudio also exits the parenthetical expression for you. IDEs are great. seq(1, 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 The above also demonstrates something about how R resolves function arguments. You can always specify in name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want a sequence from = 1 that goes to = 10. Since we didnt specify step size, the default value of by in the function definition is used, which ends up being 1 in this case. For functions I call often, I might use this resolve by position for the first argument or maybe the first two. After that, I always use name = value. Make this assignment and notice similar help with quotation marks. yo &lt;- &quot;hello world&quot; If you just make an assignment, you dont get to see the value, so then youre tempted to immediately inspect. y &lt;- seq(1, 10) y #&gt; [1] 1 2 3 4 5 6 7 8 9 10 This common action can be shortened by surrounding the assignment with parentheses, which causes assignment and print to screen to happen. (y &lt;- seq(1, 10)) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Not all functions have (or require) arguments: date() #&gt; [1] &quot;Mon Oct 18 16:55:16 2021&quot; Now look at your workspace  in the upper right pane. The workspace is where user-defined objects accumulate. You can also get a listing of these objects with commands: objects() #&gt; [1] &quot;check_quietly&quot; &quot;ds4p_urls&quot; #&gt; [3] &quot;install_quietly&quot; &quot;mason_rocks&quot; #&gt; [5] &quot;pretty_install&quot; &quot;sample_no_surprises&quot; #&gt; [7] &quot;shhh_check&quot; &quot;slide_url&quot; #&gt; [9] &quot;this_is_a_really_long_name&quot; &quot;x&quot; #&gt; [11] &quot;y&quot; &quot;yo&quot; ls() #&gt; [1] &quot;check_quietly&quot; &quot;ds4p_urls&quot; #&gt; [3] &quot;install_quietly&quot; &quot;mason_rocks&quot; #&gt; [5] &quot;pretty_install&quot; &quot;sample_no_surprises&quot; #&gt; [7] &quot;shhh_check&quot; &quot;slide_url&quot; #&gt; [9] &quot;this_is_a_really_long_name&quot; &quot;x&quot; #&gt; [11] &quot;y&quot; &quot;yo&quot; If you want to remove the object named y, you can do this: rm(y) To remove everything: rm(list = ls()) or click the broom in RStudios Environment pane. 7.2 Workspace and working directory One day you will need to quit R, go do something else and return to your analysis later. One day you will have multiple analyses going that use R and you want to keep them separate. One day you will need to bring data from the outside world into R and send numerical results and figures from R back out into the world. To handle these real life situations, you need to make two decisions: What about your analysis is real, i.e. will you save it as your lasting record of what happened? Where does your analysis live? 7.2.1 Workspace, .RData As a beginning R user, its OK to consider your workspace real. Very soon, I urge you to evolve to the next level, where you consider your saved R scripts as real. (In either case, of course the input data is very much real and requires preservation!) With the input data and the R code you used, you can reproduce everything. You can make your analysis fancier. You can get to the bottom of puzzling results and discover and fix bugs in your code. You can reuse the code to conduct similar analyses in new projects. You can remake a figure with different aspect ratio or save is as TIFF instead of PDF. You are ready to take questions. You are ready for the future. If you regard your workspace as real (saving and reloading all the time), if you need to redo analysis  youre going to either redo a lot of typing (making mistakes all the way) or will have to mine your R history for the commands you used. Rather than becoming an expert on managing the R history, a better use of your time and energy is to keep your good R code in a script for future reuse. Because it can be useful sometimes, note the commands youve recently run appear in the History pane. But you dont have to choose right now and the two strategies are not incompatible. Lets demo the save / reload the workspace approach. Upon quitting R, you have to decide if you want to save your workspace, for potential restoration the next time you launch R. Depending on your set up, R or your IDE, e.g. RStudio, will probably prompt you to make this decision. Quit R/RStudio, either from the menu, using a keyboard shortcut, or by typing q() in the Console. Youll get a prompt like this: Save workspace image to ~/.Rdata? Note where the workspace image is to be saved and then click Save. Using your favorite method, visit the directory where image was saved and verify there is a file named .RData. You will also see a file .Rhistory, holding the commands submitted in your recent session. Restart RStudio. In the Console you will see a line like this: [Workspace loaded from ~/.RData] indicating that your workspace has been restored. Look in the Workspace pane and youll see the same objects as before. In the History tab of the same pane, you should also see your command history. Youre back in business. This way of starting and stopping analytical work will not serve you well for long but its a start. 7.2.2 Working directory Any process running on your computer has a notion of its working directory. In R, this is where R will look, by default, for files you ask it to load. It also where, by default, any files you write to disk will go. Chances are your current working directory is the directory we inspected above, i.e. the one where RStudio wanted to save the workspace. You can explicitly check your working directory with: getwd() It is also displayed at the top of the RStudio console. As a beginning R user, its OK let your home directory or any other weird directory on your computer be Rs working directory. Very soon, I urge you to evolve to the next level, where you organize your projects into directories and, when working on project A, set Rs working directory to the associated directory. Although I do not recommend it, in case youre curious, you can set Rs working directory at the command line like so: setwd(&quot;~/myCoolProject&quot;) Although I do not recommend it, you can also use RStudios Files pane to navigate to a directory and then set it as working directory from the menu: Session &gt; Set Working Directory &gt; To Files Pane Location. (Youll see even more options there). Or within the Files pane, choose More and Set As Working Directory. But theres a better way. A way that also puts you on the path to managing your R work like an expert. 7.3 RStudio projects Keeping all the files associated with a project organized together  input data, R scripts, results, figures  is such a wise and common practice that RStudio has built-in support for this via its projects. Lets make one to use for the rest of this class. Do this: File &gt; New Project. The directory name you choose here will be the project name. Call it whatever you want (or follow me for convenience). I created a directory and, therefore RStudio project, called swc in my tmp directory, FYI. setwd(&quot;~/tmp/swc&quot;) Now check that the home directory for your project is the working directory of our current R process: getwd() I cant print my output here because this document itself does not reside in the RStudio Project we just created. Lets enter a few commands in the Console, as if we are just beginning a project: a &lt;- 2 b &lt;- -3 sig_sq &lt;- 0.5 x &lt;- runif(40) y &lt;- a + b * x + rnorm(40, sd = sqrt(sig_sq)) (avg_x &lt;- mean(x)) #&gt; [1] 0.515 write(avg_x, &quot;avg_x.txt&quot;) plot(x, y) abline(a, b, col = &quot;purple&quot;) dev.print(pdf, &quot;toy_line_plot.pdf&quot;) #&gt; png #&gt; 2 Lets say this is a good start of an analysis and your ready to start preserving the logic and code. Visit the History tab of the upper right pane. Select these commands. Click To Source. Now you have a new pane containing a nascent R script. Click on the floppy disk to save. Give it a name ending in .R or .r, I used toy-line.r and note that, by default, it will go in the directory associated with your project. Quit RStudio. Inspect the folder associated with your project if you wish. Maybe view the PDF in an external viewer. Restart RStudio. Notice that things, by default, restore to where we were earlier, e.g. objects in the workspace, the command history, which files are open for editing, where we are in the file system browser, the working directory for the R process, etc. These are all Good Things. Change some things about your code. Top priority would be to set a sample size n at the top, e.g. n &lt;- 40, and then replace all the hard-wired 40s with n. Change some other minor-but-detectable stuff, e.g. alter the sample size n, the slope of the line b,the color of the line  whatever. Practice the different ways to re-run the code: Walk through line by line by keyboard shortcut (Command+Enter) or mouse (click Run in the upper right corner of editor pane). Source the entire document  equivalent to entering source('toy-line.r') in the Console  by keyboard shortcut (Shift+Command+S) or mouse (click Source in the upper right corner of editor pane or select from the mini-menu accessible from the associated down triangle). Source with echo from the Source mini-menu. Visit your figure in an external viewer to verify that the PDF is changing as you expect. In your favorite OS-specific way, search your files for toy_line_plot.pdf and presumably you will find the PDF itself (no surprise) but also the script that created it (toy-line.r). This latter phenomenon is a huge win. One day you will want to remake a figure or just simply understand where it came from. If you rigorously save figures to file with R code and not ever ever ever the mouse or the clipboard, you will sing my praises one day. Trust me. 7.4 Stuff It is traditional to save R scripts with a .R or .r suffix. Follow this convention unless you have some extraordinary reason not to. Comments start with one or more # symbols. Use them. RStudio helps you (de)comment selected lines with Ctrl+Shift+C (Windows and Linux) or Command+Shift+C (Mac). Clean out the workspace, i.e. pretend like youve just revisited this project after a long absence. The broom icon or rm(list = ls()). Good idea to do this, restart R (available from the Session menu), re-run your analysis to truly check that the code youre saving is complete and correct (or at least rule out obvious problems!). This workflow will serve you well in the future: Create an RStudio project for an analytical project Keep inputs there (well soon talk about importing) Keep scripts there; edit them, run them in bits or as a whole from there Keep outputs there (like the PDF written above) Avoid using the mouse for pieces of your analytical workflow, such as loading a dataset or saving a figure. Terribly important for reproducibility and for making it possible to retrospectively determine how a numerical table or PDF was actually produced (searching on local disk on filename, among .R files, will lead to the relevant script). Many long-time users never save the workspace, never save .RData files (Im one of them), never save or consult the history. Once/if you get to that point, there are options available in RStudio to disable the loading of .RData and permanently suppress the prompt on exit to save the workspace (go to Tools &gt; Options &gt; General). For the record, when loading data into R and/or writing outputs to file, you can always specify the absolute path and thereby insulate yourself from the current working directory. This method is rarely necessary when using RStudio projects. "],["shorthappygit.html", "8 ODD: Getting Started with Github 8.1 Half the battle 8.2 Register a GitHub account 8.3 Install Git 8.4 Windows 8.5 Introduce yourself to Git 8.6 Install a Git client 8.7 Another way to use github for this course", " 8 ODD: Getting Started with Github This optional deep dive (ODD) is partially adapted from Jenny Bryans happygitwithr. I encourage you to check out the unabridged version as it has so much more detail. 8.1 Half the battle Getting all the necessary software installed, configured, and playing nicely together is honestly half the battle when first adopting Git. Brace yourself for some pain. The upside is that you can give yourself a pat on the back once you get through this. And you WILL get through this. You will find far more resources for how to use Git than for installation and configuration. Why? The experts  Have been doing this for years. Its simply not hard for them anymore. Probably use some flavor of Unix. They may secretly (or not so secretly) take pride in neither using nor knowing Windows. Get more satisfaction and reward for thinking and writing about Git concepts and workflows than Git installation. In their defense, its hard to write installation instructions. Failures can be specific to an individual OS or even individual computer. 8.2 Register a GitHub account Register an account with GitHub. Its free! https://github.com 8.2.1 Username advice You will be able to upgrade to a paid level of service, apply discounts, join organizations, etc. in the future, so dont fret about any of that now. Except your username. You might want to give that some thought. A few tips, which sadly tend to contradict each other: Incorporate your actual name! People like to know who theyre dealing with. Also makes your username easier for people to guess or remember. Reuse your username from other contexts, e.g., Twitter or Slack. But, of course, someone with no GitHub activity will probably be squatting on that. Pick a username you will be comfortable revealing to your future boss. Shorter is better than longer. Be as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames. Make it timeless. Dont highlight your current university, employer, or place of residence, e.g. JennyFromTheBlock. Avoid words laden with special meaning in programming. In Jennys first inept efforts to script around the GitHub API, she assigned lots of issues to the guy with username NA because my vector of GitHub usernames contained missing values. A variant of Little Bobby Tables. Avoid the use of upper vs. lower case to separate words. We highly recommend all lowercase. GitHub treats usernames in a case insensitive way, but using all lowercase is kinder to people doing downstream regular expression work with usernames, in various languages. A better strategy for word separation is to use a hyphen - or underscore _. You can change your username later, but better to get this right the first time. https://help.github.com/articles/changing-your-github-username/ https://help.github.com/articles/what-happens-when-i-change-my-username/ 8.2.2 Free private repos GitHub offers free unlimited private repositories for all users. These free private repositories support up to three external collaborators, making them a perfect place for your personal projects, for job applications, and testing things out before making your project open source. Go ahead and register your free account NOW and then pursue any special offer that applies to you: Students, faculty, and educational/research staff: GitHub Education. GitHub Organizations can be extremely useful for courses or research/lab groups, where you need some coordination across a set of repos and users. Official nonprofit organizations and charities: GitHub for Good 8.3 Install Git You need Git, so you can use it at the command line and so RStudio can call it. If theres any chance its installed already, verify that, rejoice, and skip this step. Otherwise, find installation instructions below for your operating system. 8.3.1 Git already installed? Go to the shell (More info on shell from Jenny Bryan). Enter which git to request the path to your Git executable: which git and git --version to see its version: git --version If you are successful, thats great! You have Git already. No need to install! Move on. If, instead, you see something more like git: command not found, keep reading. macOS users might get an immediate offer to install command line developer tools. Yes, you should accept! Click Install and read more below. 8.4 Windows Option 1 (highly recommended): Install Git for Windows, also known as msysgit or Git Bash, to get Git in addition to some other useful tools, such as the Bash shell. Yes, all those names are totally confusing, but you might encounter them elsewhere and I want you to be well-informed. We like this because Git for Windows leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the Git Bash shell will be useful as you venture outside of R/RStudio. NOTE: When asked about Adjusting your PATH environment, make sure to select Git from the command line and also from 3rd-party software. Otherwise, we believe it is good to accept the defaults. Note that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention. This also leaves you with a Git client, though not a very good one. So check out Git clients we recommend (chapter 8.6). FYI, this appears to be equivalent to what you would download from here: https://git-scm.com/download/. Additional approaches for Windows can be found here 8.4.1 macOS Although I (Mason) have limited knowledge about the inner workings of mac, I do know of quantitative psychologists who use macs with R, including Bill Revelle  author of the psych package and Full Professor at Northwestern. Option 1 (highly recommended): Install the Xcode command line tools (not all of Xcode), which includes Git. Go to the shell and enter one of these commands to elicit an offer to install developer command line tools: git --version git config Accept the offer! Click on Install. Heres another way to request this installation, more directly: xcode-select --install We just happen to find this Git-based trigger apropos. Note also that, after upgrading macOS, you might need to re-do the above and/or re-agree to the Xcode license agreement. We have seen this cause the RStudio Git pane to disappear on a system where it was previously working. Use commands like those above to tickle Xcode into prompting you for what it needs, then restart RStudio. Option 2 (recommended): Install Git from here: http://git-scm.com/downloads. This arguably sets you up the best for the future. It will certainly get you the latest version of Git of all approaches described here. The GitHub home for the macOS installer is here: https://github.com/timcharper/git_osx_installer. At that link, you can find more info if something goes wrong or you are working on an old version of macOS. Additional approaches for macOS can be found here 8.5 Introduce yourself to Git In the shell (More info on shell from Jenny Bryan): git config --global user.name &#39;Jane Doe&#39; git config --global user.email &#39;jane@example.com&#39; git config --global --list substituting your name and the email associated with your GitHub account. The usethis package offers an alternative approach. You can set your Git user name and email from within R: ## install if needed (do this exactly once): ## install.packages(&quot;usethis&quot;) library(usethis) use_git_config(user.name = &quot;Jane Doe&quot;, user.email = &quot;jane@example.org&quot;) 8.5.1 More about git config An easy way to get into a shell from RStudio is Tools &gt; Terminal or Tools &gt; Shell. (More info on shell from Jenny Bryan). Special Windows gotchas: If you are struggling on Windows, consider there are different types of shell and you might be in the wrong one. You want to be in a Git Bash shell, as opposed to Power Shell or the legacy cmd.exe command prompt. This might also be a reason to do this configuration via the usethis package in R. What user name should you give to Git? This does not have to be your GitHub user name, although it can be. Another good option is your actual first name and last name. If you commit from different machines, sometimes people work that info into the user name. Your commits will be labeled with this user name, so make it informative to potential collaborators and future you. What email should you give to Git? This must be the email associated with your GitHub account. These commands return nothing. You can check that Git understood what you typed by looking at the output of git config --global --list. 8.5.2 Configure the Git editor Another Git option that many people eventually configure is the editor. At some point, you will fail to give Git what it wants in terms of a commit message and it will kick you into an editor. This can be distressing, if its not your editor of choice and you dont even know how to save and quit. You can enforce your will with something along these lines: git config --global core.editor &quot;emacs&quot; Substitute your preferred editor for \"emacs\" here. Software Carpentrys Git lesson has a comprehensive listing of the exact git config command needed for many combinations of OS and editor. 8.6 Install a Git client Although having a git client is, I highly recommend it for the same reasons as I recommend having Rstudio. Learning to use version control can be rough at first. I found the use of a GUI  as opposed to the command line  extremely helpful when I was getting started. I call this sort of helper application a Git client. Its really a Git(Hub) client because it also helps you interact with GitHub or other remotes. 8.6.1 What is a Git client? Why would you want one? Git is really just a collection of individual commands you execute in the shell (Appendix ??). This interface is not appealing for everyone. Some may prefer to do Git operations via a client with a graphical interface. Git and your Git client are not the same thing, just like R and RStudio are not the same thing. A Git client and an integrated development environment, such as RStudio, are not necessary to use Git or R, respectively. But they make the experience more pleasant because they reduce the amount of command line bullshittery and provide a richer visual representation of the current state. RStudio offers a very basic Git client via its Git pane. I use this often for simple operations, but you probably want another, more powerful one as well. Fair warning: for some tasks, you must use the command line. But the more powerful your Git client is, the less often this happens. The visual overview given by your Git client can also be invaluable for understanding the current state of things, even when preparing calls to command line Git. Fantastic news: because all of the clients are just forming and executing Git commands on your behalf, you dont have to pick one. You can literally do one operation from the command line, do another from RStudio, and another from SourceTree, one after the other, and it just works. Very rarely, both clients will scan the repo at the same time and youll get an error message about .git/index.lock. Try the operation again at least once before doing any further troubleshooting. 8.6.2 A picture is worth a thousand words Heres a screenshot of SourceTree (see below) open to the repository for this site. You get a nice graphical overview of the recent commit history, branches, and diffs, as well as a GUI that facilitates the most common Git operations. SourceTree screenshot In contrast, heres a shell session where Ive used command line Git to access some of the same information. Command line Git Which do you prefer? 8.6.3 No one is giving out Git Nerd merit badges Work with Git in whatever way makes you most effective. Feel free to revisit your approach over time or to use different approaches for different tasks. No one can tell whether you use the command line or a GUI when they look at your Git history or your GitHub repo. If your Git life happens on your own computer, there is no reason to deny yourself a GUI if thats what you like. If you prefer working in the shell or if you frequently log into a remote server, then it makes sense to prioritize building Git skills at the command line. Do whatever works for you, but dont do anything for the sake of purity or heroism. 8.7 Another way to use github for this course I will introduce one way to utilize github for this course. For example, you might want to download lab-02-plastic-waste. First, create account/password in the Github, and install desktop Github app. Go to your repositories Click the new button Repositories template -&gt; DS4P/lab-02-plastic-waste You can create this repositories. Than, go to the repository that youve just created. Click code&gt;open with the GitHub Desktop Click Open GitHubDesktop You can change the local path by clicking choose. And if you click the clone button, the lab02 plastic waste file would be in your local path. Your changes would be automatically reflected in the app. write something in there (where I wrote write something) and click Commit to main button click the Push Origin button, and tada~ 8.7.1 Recommended Git clients GitKraken is a free, powerful Git(Hub) client that is Jenny Bryans current favorite. Its especially exciting because it works on Windows, macOS, and Linux. This is great news, especially for long-suffering Linux users who have previously had very few options. SourceTree is another free client that Jenny highly recommends, at least on Windows.1 It was hery first and most beloved Git client, but she eventually had to give it up on macOS, due to a long-standing bug re: leaking file handles that they will clearly never fix. I still use SourceTree on Windows. GitHub offers a free Git(Hub) client, GitHub Desktop, for Windows and macOS. GitHub Desktop is aimed at beginners who want the most useful features of Git front and center. The flipside is that it may not support some of the more advanced workflows exposed by the clients above. At present, this client is what I mostly use. Others that I have heard positive reviews for: magit, for Emacs nerds GitUp SmartGit git-cola Browse even more Git(Hub) clients. During installation and registration, youll need to create a free Atlassian Bitbucket account and link that to a free Atlassian Bitbucket Cloud account. Also, feel free to uncheck the checkbox about installing Mercurial (another version control system), unless you feel you need it. "],["lab01.html", "9 Lab: Hello R! 9.1 Lab Goals 9.2 Getting started 9.3 Exercises", " 9 Lab: Hello R! The labs for this course have been adapted from a series of Rstudio tutorials. These tutorials were initially created by Mine Ã‡etinkaya-Rundel. Mine is fantastic; her work is fantastic; and shes just a badass! I have adapted these tutorials for two reasons: I think it useful to see other people working with R; and Pragmatically, using Mines lab materials means that I can spend more time on other aspects of the course  like the website, course notes, videos, feedback, learning how to embed tweets That&#39;s so wonderful to hear, thank you!&mdash; Mine Ã‡etinkaya-Rundel (@minebocek) January 22, 2021 Seriously, youd never know it, but every hour of finished video takes between 4 and 6 hours to make. (2 hours of writing, 1.5 hours of filming, and 2.5 hours for video editing). 9.1 Lab Goals Recall: R is the name of the programming language itself and RStudio is a convenient interface. The main goal of this lab is to introduce you to R and RStudio. We will be using them throughout the course: to learn the statistical concepts discussed in the course, and to analyze real data and come to informed conclusions. Recall: git is a version control system (like Track Changes features from Microsoft Word on steroids) and GitHub is the home for your Git-based projects on the Internet (like DropBox but much, much better). An additional goal is to introduce you to Git and GitHub, which is the collaboration and version control system that we will be using throughout the course. As the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer. Before we get to that stage, however, you need to build some basic fluency in R. Today we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands. To make versioning simpler, this lab is a solo lab. I want to make sure everyone gets a significant amount of time at the steering wheel, working directly with R. In the future modules,youll learn about collaborating on GitHub and produce a single lab report for your team. 9.2 Getting started Each of your assignments will begin with the following steps. Theyre outlined in detail here. Going forward, each lab will start with a Getting started section but details will be a bit more sparse than this. You can always refer back to this lab for a detailed list of the steps involved for getting started with an assignment. You can find the assignment link for this lab right here. That GitHub repository (which well refer to as repo going forward) is a template for the assignment. You can build on it to complete your assignment. On GitHub, click on the green Clone or download button, select Use HTTPS (this might already be selected by default, and if it is, youll see the text Clone with HTTPS as in the image below). Click on the clipboard icon to copy the repo URL. Go to RStudio. Create a New Project from Git Repo. You will need to click on the down arrow next to the New Project button to see this option. Copy and paste the URL of your assignment repo into the dialog box: Hit OK, and youre good to go! 9.2.1 Warm up Before we introduce the data, lets warm up with some simple exercises. FYI: The top portion of your R Markdown file (between the three dashed lines) is called YAML. It stands for YAML Aint Markup Language. It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document. 9.2.1.1 YAML Open the R Markdown (Rmd) file in your project, change the author name to your name, and knit the document. 9.2.1.2 Committing changes Then go to the Git pane in your RStudio. If you have made changes to your Rmd file, you should see it listed here. Click on it to select it in this list and then click on Diff. This shows you the difference between the last committed state of the document and its current state that includes your changes. If youre happy with these changes, write Update author name in the Commit message box and hit Commit. You dont have to commit after every change, doing so would get quite cumbersome. You should consider committing states that are meaningful to you for inspection, comparison, or restoration. In the first few assignments, Ill suggest exactly when to commit and in some cases, what commit message to use. As the semester progresses, you make these decisions. 9.2.1.3 Pushing changes Now that you have made an update and committed this change, its time to push these changes to the web! Or more specifically, to your repo on GitHub. Why? So that others can see your changes. And by others, we mean the course teaching team (your repos in this course are private to you and us, only). In order to push your changes to GitHub, click on Push. This will prompt a dialog box where you first need to enter your user name, and then your password. This might feel cumbersome. Soon  you will learn how to save your password so you dont have to enter it every time. But for this one assignment youll have to manually enter each time you push in order to gain some experience with it. 9.2.2 Packages In this lab, we will work with two packages: datasauRus and tidyverse. datasauRus contains the dataset well be using; tidyverse is a collection of packages for doing data analysis in a tidy way. Install these packages by running the following commands in the console. install.packages(&quot;tidyverse&quot;) install.packages(&quot;datasauRus&quot;) Now that the necessary packages are installed, you should be able to Knit your document and see the results. If youd like to run your code in the Console as well youll also need to load the packages there. To do so, run the following in the console. library(tidyverse) library(datasauRus) Note that the packages are also loaded with the same commands in your R Markdown document. 9.2.3 Data Fun fact: If its confusing that the data frame is called datasaurus_dozen when it contains 13 datasets, youre not alone! Have you heard of a bakers dozen? The data frame we will be working with today is called datasaurus_dozen and its in the datasauRus package. Actually, this single data frame contains 13 datasets, designed to show us why data visualization is important and how summary statistics alone can be misleading. The different datasets are marked by the dataset variable. To find out more about the dataset, type the following in your Console: ?datasaurus_dozen. A question mark before the name of an object will always bring up its help file. This command must be run in the Console. 9.3 Exercises Based on the help file, how many rows and how many columns does the datasaurus_dozen file have? What are the variables included in the data frame? Add your responses to your lab report. Lets take a look at what these datasets are. To do so we can make a frequency table of the dataset variable: datasaurus_dozen %&gt;% count(dataset) %&gt;% print(13) #&gt; # A tibble: #&gt; # 13 x 2 #&gt; dataset #&gt; &lt;chr&gt; #&gt; 1 away #&gt; 2 bullseye #&gt; 3 circle #&gt; 4 dino #&gt; 5 dots #&gt; 6 h_lines #&gt; 7 high_lines #&gt; 8 slant_down #&gt; 9 slant_up #&gt; 10 star #&gt; 11 v_lines #&gt; 12 wide_lines #&gt; 13 x_shape #&gt; # ... with 1 #&gt; # more #&gt; # variable: #&gt; # n &lt;int&gt; Fun fact: Matejka, Justin, and George Fitzmaurice. Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing. Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems. ACM, 2017. The original Datasaurus (dino) was created by Alberto Cairo in this great blog post. The other Dozen were generated using simulated annealing and the process is described in the paper Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing by Justin Matejka and George Fitzmaurice. In the paper, the authors simulate a variety of datasets that have the same summary statistics as the Datasaurus but have very different distributions.    Knit, commit, and push your changes to GitHub with the commit message Added answer for Ex 1. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards. Plot y vs. x for the dino dataset. Then, calculate the correlation coefficient between x and y for this dataset. Below is the code you will need to complete this exercise. Basically, the answer is already given, but you need to include relevant bits in your Rmd document and successfully knit it and view the results. Start with the datasaurus_dozen and pipe it into the filter function to filter for observations where dataset == \"dino\". Store the resulting filtered data frame as a new data frame called dino_data. dino_data &lt;- datasaurus_dozen %&gt;% filter(dataset == &quot;dino&quot;) Because a lot going on here  lets slow down and unpack it a bit. First, the pipe operator: %&gt;%, takes what comes before it and sends it as the first argument to what comes after it. So here, were saying filter the datasaurus_dozen data frame for observations where dataset == \"dino\". Second, the assignment operator: &lt;-, assigns the name dino_data to the filtered data frame. Next, we need to visualize these data. We will use the ggplot function for this. Its first argument is the data youre visualizing. Next we define the aesthetic mappings. In other words, the columns of the data that get mapped to certain aesthetic features of the plot, e.g. the x axis will represent the variable called x and the y axis will represent the variable called y. Then, we add another layer to this plot where we define which geometric shapes we want to use to represent each observation in the data. In this case, we want these to be points, hence geom_point. ggplot(data = dino_data, mapping = aes(x = x, y = y)) + geom_point() If this seems like a lot, it is. And you will learn about the philosophy of layering data visualizations in detail next week. For now, follow along with the code that is provided. For the second part of these exercises, we need to calculate a summary statistic: the correlation coefficient. Recall: Correlation coefficient, often referred to as \\(r\\) in statistics, measures the linear association between two variables. You will see that some of the pairs of variables we plot do not have a linear relationship between them. This nonlinear relationships are exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate \\(r\\) only if relevant. In this case, calculating a correlation coefficient really doesnt make sense since the relationship between x and y is definitely not linear  its dinosaurial! But, for illustrative purposes, lets calculate the correlation coefficient between x and y. Tip: Start with dino_data and calculate a summary statistic that we will call r as the correlation between x and y. dino_data %&gt;% summarize(r = cor(x, y)) #&gt; # A tibble: 1 x 1 #&gt; r #&gt; &lt;dbl&gt; #&gt; 1 -0.0645    Knit, commit, and push your changes to GitHub with the commit message Added answer for Ex 2. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards. Plot y vs. x for the star dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?    This is another good place to pause, knit, commit changes with the commit message Added answer for Ex 3, and push. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards. Plot y vs. x for the circle dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?    You should pause again, commit changes with the commit message Added answer for Ex 4, and push. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards. Finally, lets plot all datasets at once. In order to do this we will make use of faceting. Hint: Facet by the dataset variable, placing the plots in a 3 column grid. ggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+ geom_point()+ facet_wrap(~ dataset, ncol = 3) + theme(legend.position = &quot;none&quot;) And we can use the group_by function to generate all the summary correlation coefficients. datasaurus_dozen %&gt;% group_by(dataset) %&gt;% summarize(r = cor(x, y)) %&gt;% print(13) Youre done with the data analysis exercises, but wed like you to do two more things: Resize your figures: Click on the gear icon near the top of the R Markdown document, and select Output Options in the dropdown menu. In the pop up dialog box, go to the Figures tab and change the height and width of the figures, and hit OK when done. Then, knit your document and see how you like the new sizes. Change and knit again and again until youre happy with the figure sizes. Note that these values get saved in the YAML. You can also use different figure sizes for different figures. To do so, click on the gear icon within the chunk where you want to make a change. Changing the figure sizes added new options to these chunks: fig.width and fig.height. You can change them by defining different values directly in your R Markdown document as well. Change the look of your report: Once again, click on the gear icon in on top of the R Markdown document, and select Output Options in the dropdown menu. In the General tab of the pop up dialog box, try out different Syntax highlighting and theme options. Hit OK and knit your document to see how it looks. Play around with these until youre happy with the look. Pro Tip: Not sure how to use emojis on your computer? Maybe a teammate can help?    Yay, youre done! Commit all remaining changes, use the commit message \"Done with Lab 1! \", and push. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards. Before you wrap up the assignment, make sure all documents are updated on your GitHub repo. "],["good-resources.html", "10 Good Resources", " 10 Good Resources https://psychnerdjae.github.io/into-the-tidyverse/ Automatic Grading with RMarkdown example Git/Github for virtual learning (from this tweet) Learn-Datascience-for-Free https://allisonhorst.shinyapps.io/dplyr-learnr/ Visualizing Linear Models: An R Bag of Tricks "],["media-without-a-home-yet.html", "11 Media without a home yet 11.1 Visualizing Linear Models: An R Bag of Tricks 11.2 For new programmers learning keyboard shortcuts 11.3 Are you a student? If yes, this is the best data science project for you! 11.4 rstudio is magic 11.5 automation quote 11.6 How computer memory works! 11.7 Is Coding a Math Skill or a Language Skill? Neither? Both? 11.8 Quantum Computers Explained! 11.9 The Rise of the Machines  Why Automation is Different this Time 11.10 Who Would Be King of America if George Washington had been made a monarch? 11.11 Emergence  How Stupid Things Become Smart Together 11.12 The Birthday Paradox 11.13 Why cant you divide by zero? 11.14 Yea hes chewing up my stats homework but that face though 11.15 Coding Kitty 11.16 Democratic databases: science on GitHub 11.17 Ten simple rules for getting started on Twitter as a scientist 11.18 NYT data ethics stuff 11.19 ", " 11 Media without a home yet 11.1 Visualizing Linear Models: An R Bag of Tricks I&#39;m starting a 3-week #rstats short course, Visualizing Linear Models: An R Bag of Tricks.One week on univariate models, two weeks on models for multivariate responses. Lectures notes, examples and exercises are at: https://t.co/LF1iVPZOPs&mdash; Michael Friendly (@datavisFriendly) February 27, 2021 11.2 For new programmers learning keyboard shortcuts https://www.shortcutfoo.com/ 11.3 Are you a student? If yes, this is the best data science project for you! 11.4 rstudio is magic Multiple cursors in @RStudio are so handy! Holding down the option key and drag gives me multiple synced cursors  pic.twitter.com/nQKzqIwsou&mdash; Emil Hvitfeldt (@Emil_Hvitfeldt) February 2, 2021 11.5 automation quote &quot;Ive always objected to doing anything over again if I had already done it once.&quot;  Grace Hopper&mdash; Programming Wisdom (@CodeWisdom) February 8, 2021 11.6 How computer memory works! 11.7 Is Coding a Math Skill or a Language Skill? Neither? Both? 11.8 Quantum Computers Explained! 11.9 The Rise of the Machines  Why Automation is Different this Time 11.10 Who Would Be King of America if George Washington had been made a monarch? 11.11 Emergence  How Stupid Things Become Smart Together 11.12 The Birthday Paradox 11.13 Why cant you divide by zero? 11.14 Yea hes chewing up my stats homework but that face though Yea hes chewing up my stats homework but that face though from r/CatsBeingCats 11.15 Coding Kitty https://hostrider.com/ 11.16 Democratic databases: science on GitHub Nature: Democratic databases: science on GitHub (Perkel, 2016). 11.17 Ten simple rules for getting started on Twitter as a scientist https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007513 11.18 NYT data ethics stuff https://www.nytimes.com/2021/01/31/technology/facial-recognition-photo-tool.html 11.19 Art! https://t.co/XuDToJAmnp&mdash; Prof. Mason Garrison  (@SMasonGarrison) March 18, 2021 "],["welcome-to-the-template-module.html", "12 Welcome to the !template module! 12.1 Module Materials", " 12 Welcome to the !template module! This module is designed to &lt;&gt;. Please watch the videos and work your way through the notes. The videos start on the next page. You can find the video playlist for this module here. Most of the slides used to make the videos in this module can be found in the slides repo. 12.1 Module Materials Slides from Lectures LINK Activities LINK Suggested Readings All subchapters of this module, including [Notes on Functions][#functions-part1] r4ds Sections on functions, and Iterations Lab [LAB A][lab08] [LAB B][lab08b] "],["important-topic-a.html", "Important Topic A! Activity", " Important Topic A! Wow Im so humbly grateful much love to yall&mdash; Missy Elliott (@MissyElliott) April 26, 2021 You can follow along with the slides here if they do not appear below. Activity You can find the materials for this activity here. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
